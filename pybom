#!/usr/bin/python3

from pprint import pprint as pprint
import tkinter as tk
from tkinter import ttk
from tkinter import filedialog
import sys

from Inventory import *
from UIComponents import EditItemPopup, MenuBar


class Table(tk.Frame):
    def __init__(self, parent, frame):
        tk.Frame.__init__(self)
        self.frame = tk.Frame(frame)
        self.parent = parent
        self.createInventoryTable()
    
    def createInventoryTable(self):
        tv = ttk.Treeview(self.frame)
        ts = ttk.Scrollbar(self.frame)

        ts.configure(command=tv.yview)
        tv.configure(yscrollcommand=ts.set)

        tv['columns'] = ('MFRPN', 'MFR', 'FOOTPRINT', 'DESCRIPTION', 'STOCK')
        tv.heading("#0", text='ID', anchor='w')
        tv.column("#0", anchor="w", width=50)

        tv.heading('MFRPN', text='MManufacturer Part No')
        tv.column('MFRPN', anchor='w', width=200)
        tv.heading('MFR', text='Manufacturer')
        tv.column('MFR', anchor='w', width=150)
        tv.heading('FOOTPRINT', text='Footprint')
        tv.column('FOOTPRINT', anchor='w', width=100)
        tv.heading('DESCRIPTION', text='Description')
        tv.column('DESCRIPTION', anchor='w', width=350)
        tv.heading('STOCK', text='Stock')
        tv.column('STOCK', anchor='e', width=50)

        tv.bind("<Double-1>", self.onDoubleClick)
        tv.pack(side='left', fill='both', expand=1)
        ts.pack(side='right', fill='y')
        self.frame.pack(fill='both', expand=1)
        self.treeview = tv

    def onDoubleClick(self, event):
        # double click can happen only on one row
        i = self.treeview.selection()[0]
        itemID = self.treeview.item(i,"text")
        sel = self.parent.itemMgr.getItemFromID(itemID)
        editWindow = EditItemPopup(self, sel)
        self.parent.wait_window(editWindow.top)
        if editWindow.mItem is not None:
            print("Modified Item: "+ str(editWindow.mItem))
            self.parent.itemMgr.updateItem(editWindow.mItem)

    def insertItem(self, item):
        records=item.getItemList()
        self.treeview.insert('', 'end', text=records[0], values=records[1:])

    def flushRecords(self):
        self.treeview.delete(*self.treeview.get_children())


class App(tk.Tk):
    def __init__(self):
        tk.Tk.__init__(self)
        self.configure()
        self.nb = ttk.Notebook(self)
        self.itemMgr = ItemManager(self)
        self.menubar = MenuBar(self)
        self.config(menu=self.menubar)
        
        invFrame = tk.Frame(self)
        self.table = Table(self, invFrame)
        self.nb.add(invFrame, text="Inventory")

        editFrame = tk.Frame(self)
        sString = tk.StringVar()
        tk.Label(editFrame, text="Search" ).grid(row=0, column=0, sticky='w', pady=3, padx=10)
        tk.Entry(editFrame, width=32, textvariable=sString).grid(row=0, column=1, padx=10)
        ttk.Button(editFrame, text='Search', command=(lambda: self.searchTable(sString.get()))).grid(row=0, column=2, sticky='w', padx=10)
        editFrame.pack(side='top', pady=20)
        self.nb.add(editFrame, text="Edit")
        self.nb.pack(fill='both', expand=1, padx=3, pady=3)

        try:
            self.itemMgr.openDatabase('item.DB')
            self.itemMgr.loadInventoryTable(self.table)
            print('Loaded defalut DB..')
        except Exception as err:
            print("Default DB error: " + err)

    def openDatabase(self):
        try:
            name = filedialog.askopenfilename()
            self.itemMgr.openDatabase(name)
            self.table.flushRecords()
            self.itemMgr.loadInventoryTable(self.table)
        except Exception as err:
            self.showError(err)
        
    def createDatabase(self):
        try:
            name = filedialog.asksaveasfilename()
            self.itemMgr.createDatabase(name)
        except Exception as err:
            self.showError(err)

    def importInventory(self):
        try:
            self.itemMgr.importInventoryFromCSV(filedialog.askopenfilename())
            self.table.flushRecords()
            self.itemMgr.loadInventoryTable(self.table)
        except Exception as err:
            self.showError(err)

    def exportInventory(self):
        self.itemMgr.exportInventoryToCSV(filedialog.asksaveasfilename())   
        
    def configure(self):
        # config stuffs
        self.title("PyBom")
        self.geometry("1200x600+100+100")

    def showError(self, msg):
        messagebox.showinfo("Error", msg)
        
if __name__ == "__main__":
    app=App()
    app.mainloop()
